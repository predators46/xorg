--- a/lib/wmchat/go/CMakeLists.txt
+++ b/lib/wmchat/go/CMakeLists.txt
@@ -6,7 +6,7 @@ project(libcgowm)
 execute_process(COMMAND bash "-c" "go version | cut -c14- | cut -d' ' -f1 | tr -d '\n'" OUTPUT_VARIABLE GO_VERSION)
 if (GO_VERSION VERSION_GREATER_EQUAL 1.16.0)
   message(STATUS "Go version ${GO_VERSION} (enable modcacherw).")
-  SET(CUSTOM_GO_FLAGS -modcacherw -mod=mod) # @todo: remove -mod=mod eventually, see https://github.com/golang/go/issues/44129
+  SET(CUSTOM_GO_FLAGS GOOS="$(GO_OS)" GOARCH="$(GO_ARCH)" CC="$(TARGET_CC)" CXX="$(TARGET_CXX)" CGO_CFLAGS="$(filter-out $(GO_CFLAGS_TO_REMOVE),$(TARGET_CFLAGS))" CGO_CPPFLAGS="$(TARGET_CPPFLAGS)" CGO_CXXFLAGS="$(filter-out $(GO_CFLAGS_TO_REMOVE),$(TARGET_CXXFLAGS))" CGO_LDFLAGS="$(TARGET_LDFLAGS)" GOCACHE="$(GO_BUILD_CACHE_DIR)" GOMODCACHE="$(GO_MOD_CACHE_DIR)" GOFLAGS="$(GO_PKG_GCFLAGS)" GO_PKG_CFLAGS="$(GO_PKG_CFLAGS)" CGO_ENABLED=1 GOENV=off -modcacherw -mod=mod) # @todo: remove -mod=mod eventually, see https://github.com/golang/go/issues/44129
 else ()
   message(STATUS "Go version ${GO_VERSION}.")
   SET(CUSTOM_GO_FLAGS "")
